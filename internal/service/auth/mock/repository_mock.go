// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	model "github.com/confus1on/authez/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepositoryAuth is a mock of RepositoryAuth interface
type MockRepositoryAuth struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryAuthMockRecorder
}

// MockRepositoryAuthMockRecorder is the mock recorder for MockRepositoryAuth
type MockRepositoryAuthMockRecorder struct {
	mock *MockRepositoryAuth
}

// NewMockRepositoryAuth creates a new mock instance
func NewMockRepositoryAuth(ctrl *gomock.Controller) *MockRepositoryAuth {
	mock := &MockRepositoryAuth{ctrl: ctrl}
	mock.recorder = &MockRepositoryAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryAuth) EXPECT() *MockRepositoryAuthMockRecorder {
	return m.recorder
}

// FindUser mocks base method
func (m *MockRepositoryAuth) FindUser(input model.InputAuth) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", input)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser
func (mr *MockRepositoryAuthMockRecorder) FindUser(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockRepositoryAuth)(nil).FindUser), input)
}
