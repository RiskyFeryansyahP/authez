// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	model "github.com/confus1on/authez/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecaseAuth is a mock of UsecaseAuth interface
type MockUsecaseAuth struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseAuthMockRecorder
}

// MockUsecaseAuthMockRecorder is the mock recorder for MockUsecaseAuth
type MockUsecaseAuthMockRecorder struct {
	mock *MockUsecaseAuth
}

// NewMockUsecaseAuth creates a new mock instance
func NewMockUsecaseAuth(ctrl *gomock.Controller) *MockUsecaseAuth {
	mock := &MockUsecaseAuth{ctrl: ctrl}
	mock.recorder = &MockUsecaseAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecaseAuth) EXPECT() *MockUsecaseAuthMockRecorder {
	return m.recorder
}

// AuthenticationValidation mocks base method
func (m *MockUsecaseAuth) AuthenticationValidation(input model.InputAuth) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticationValidation", input)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticationValidation indicates an expected call of AuthenticationValidation
func (mr *MockUsecaseAuthMockRecorder) AuthenticationValidation(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationValidation", reflect.TypeOf((*MockUsecaseAuth)(nil).AuthenticationValidation), input)
}
